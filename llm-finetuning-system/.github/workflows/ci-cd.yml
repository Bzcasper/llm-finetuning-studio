name: LLM Fine-Tuning Studio CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run backend tests
      run: |
        python -m pytest tests/test_backend.py -v
    
    - name: Test API endpoints
      run: |
        python tests/test_api_integration.py

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  test-modal-integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-backend, test-frontend]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Modal CLI
      run: |
        pip install modal
    
    - name: Test Modal deployment (dry run)
      env:
        MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
        MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
      run: |
        modal token set --token-id $MODAL_TOKEN_ID --token-secret $MODAL_TOKEN_SECRET
        python tests/test_modal_deployment.py

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
    
    - name: Python security check
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Node.js security audit
      run: |
        cd frontend
        npm audit --audit-level moderate

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [test-backend, test-frontend, security-scan]
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      env:
        MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
        MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
      run: |
        pip install modal
        modal token set --token-id $MODAL_TOKEN_ID --token-secret $MODAL_TOKEN_SECRET
        modal deploy finetune_llm.py --env staging

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test-backend, test-frontend, test-modal-integration, security-scan]
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      env:
        MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
        MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
      run: |
        pip install modal
        modal token set --token-id $MODAL_TOKEN_ID --token-secret $MODAL_TOKEN_SECRET
        modal deploy finetune_llm.py --env production
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release of LLM Fine-Tuning Studio
          
          Changes in this release:
          - Updated Modal deployment
          - Latest frontend build
          - Security patches applied
        draft: false
        prerelease: false

